/* automatically generated by rust-bindgen 0.59.2 */

pub const __GNUC_VA_LIST: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 120300;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const DEPRECATED_OR_OBSOLETE_CODE_REMOVED: u32 = 1;
pub const LAME_MAXALBUMART: u32 = 131072;
pub const LAME_MAXMP3BUFFER: u32 = 147456;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
pub type ssize_t = __darwin_ssize_t;
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type lame_report_function =
    ::std::option::Option<unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ap: va_list)>;
pub const vbr_mode_e_vbr_off: vbr_mode_e = 0;
pub const vbr_mode_e_vbr_mt: vbr_mode_e = 1;
pub const vbr_mode_e_vbr_rh: vbr_mode_e = 2;
pub const vbr_mode_e_vbr_abr: vbr_mode_e = 3;
pub const vbr_mode_e_vbr_mtrh: vbr_mode_e = 4;
pub const vbr_mode_e_vbr_max_indicator: vbr_mode_e = 5;
pub const vbr_mode_e_vbr_default: vbr_mode_e = 4;
pub type vbr_mode_e = ::std::os::raw::c_uint;
pub use self::vbr_mode_e as vbr_mode;
pub const MPEG_mode_e_STEREO: MPEG_mode_e = 0;
pub const MPEG_mode_e_JOINT_STEREO: MPEG_mode_e = 1;
pub const MPEG_mode_e_DUAL_CHANNEL: MPEG_mode_e = 2;
pub const MPEG_mode_e_MONO: MPEG_mode_e = 3;
pub const MPEG_mode_e_NOT_SET: MPEG_mode_e = 4;
pub const MPEG_mode_e_MAX_INDICATOR: MPEG_mode_e = 5;
pub type MPEG_mode_e = ::std::os::raw::c_uint;
pub use self::MPEG_mode_e as MPEG_mode;
pub const Padding_type_e_PAD_NO: Padding_type_e = 0;
pub const Padding_type_e_PAD_ALL: Padding_type_e = 1;
pub const Padding_type_e_PAD_ADJUST: Padding_type_e = 2;
pub const Padding_type_e_PAD_MAX_INDICATOR: Padding_type_e = 3;
pub type Padding_type_e = ::std::os::raw::c_uint;
pub use self::Padding_type_e as Padding_type;
pub const preset_mode_e_ABR_8: preset_mode_e = 8;
pub const preset_mode_e_ABR_320: preset_mode_e = 320;
pub const preset_mode_e_V9: preset_mode_e = 410;
pub const preset_mode_e_VBR_10: preset_mode_e = 410;
pub const preset_mode_e_V8: preset_mode_e = 420;
pub const preset_mode_e_VBR_20: preset_mode_e = 420;
pub const preset_mode_e_V7: preset_mode_e = 430;
pub const preset_mode_e_VBR_30: preset_mode_e = 430;
pub const preset_mode_e_V6: preset_mode_e = 440;
pub const preset_mode_e_VBR_40: preset_mode_e = 440;
pub const preset_mode_e_V5: preset_mode_e = 450;
pub const preset_mode_e_VBR_50: preset_mode_e = 450;
pub const preset_mode_e_V4: preset_mode_e = 460;
pub const preset_mode_e_VBR_60: preset_mode_e = 460;
pub const preset_mode_e_V3: preset_mode_e = 470;
pub const preset_mode_e_VBR_70: preset_mode_e = 470;
pub const preset_mode_e_V2: preset_mode_e = 480;
pub const preset_mode_e_VBR_80: preset_mode_e = 480;
pub const preset_mode_e_V1: preset_mode_e = 490;
pub const preset_mode_e_VBR_90: preset_mode_e = 490;
pub const preset_mode_e_V0: preset_mode_e = 500;
pub const preset_mode_e_VBR_100: preset_mode_e = 500;
pub const preset_mode_e_R3MIX: preset_mode_e = 1000;
pub const preset_mode_e_STANDARD: preset_mode_e = 1001;
pub const preset_mode_e_EXTREME: preset_mode_e = 1002;
pub const preset_mode_e_INSANE: preset_mode_e = 1003;
pub const preset_mode_e_STANDARD_FAST: preset_mode_e = 1004;
pub const preset_mode_e_EXTREME_FAST: preset_mode_e = 1005;
pub const preset_mode_e_MEDIUM: preset_mode_e = 1006;
pub const preset_mode_e_MEDIUM_FAST: preset_mode_e = 1007;
pub type preset_mode_e = ::std::os::raw::c_uint;
pub use self::preset_mode_e as preset_mode;
pub const asm_optimizations_e_MMX: asm_optimizations_e = 1;
pub const asm_optimizations_e_AMD_3DNOW: asm_optimizations_e = 2;
pub const asm_optimizations_e_SSE: asm_optimizations_e = 3;
pub type asm_optimizations_e = ::std::os::raw::c_uint;
pub use self::asm_optimizations_e as asm_optimizations;
pub const Psy_model_e_PSY_GPSYCHO: Psy_model_e = 1;
pub const Psy_model_e_PSY_NSPSYTUNE: Psy_model_e = 2;
pub type Psy_model_e = ::std::os::raw::c_uint;
pub use self::Psy_model_e as Psy_model;
pub const buffer_constraint_e_MDB_DEFAULT: buffer_constraint_e = 0;
pub const buffer_constraint_e_MDB_STRICT_ISO: buffer_constraint_e = 1;
pub const buffer_constraint_e_MDB_MAXIMUM: buffer_constraint_e = 2;
pub type buffer_constraint_e = ::std::os::raw::c_uint;
pub use self::buffer_constraint_e as buffer_constraint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lame_global_struct {
    _unused: [u8; 0],
}
pub type lame_global_flags = lame_global_struct;
pub type lame_t = *mut lame_global_flags;
extern "C" {
    #[doc = "  The LAME API"]
    #[doc = "  These functions should be called, in this order, for each"]
    #[doc = "  MP3 file to be encoded.  See the file \"API\" for more documentation"]
    #[doc = ""]
    pub fn lame_init() -> *mut lame_global_flags;
}
extern "C" {
    #[doc = "  input stream description"]
    pub fn lame_set_num_samples(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_num_samples(arg1: *const lame_global_flags) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn lame_set_in_samplerate(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_in_samplerate(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_num_channels(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_num_channels(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_scale(arg1: *mut lame_global_flags, arg2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_scale(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_scale_left(arg1: *mut lame_global_flags, arg2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_scale_left(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_scale_right(arg1: *mut lame_global_flags, arg2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_scale_right(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_out_samplerate(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_out_samplerate(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  general control parameters"]
    pub fn lame_set_analysis(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_analysis(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_bWriteVbrTag(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_bWriteVbrTag(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_decode_only(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_decode_only(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_quality(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_quality(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_mode(arg1: *mut lame_global_flags, arg2: MPEG_mode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_mode(arg1: *const lame_global_flags) -> MPEG_mode;
}
extern "C" {
    pub fn lame_set_force_ms(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_force_ms(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_free_format(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_free_format(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_findReplayGain(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_findReplayGain(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_decode_on_the_fly(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_decode_on_the_fly(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_nogap_total(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_nogap_total(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_nogap_currentindex(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_nogap_currentindex(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_errorf(
        arg1: *mut lame_global_flags,
        arg2: lame_report_function,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_debugf(
        arg1: *mut lame_global_flags,
        arg2: lame_report_function,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_msgf(
        arg1: *mut lame_global_flags,
        arg2: lame_report_function,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_brate(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_brate(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_compression_ratio(
        arg1: *mut lame_global_flags,
        arg2: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_compression_ratio(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_preset(
        gfp: *mut lame_global_flags,
        arg1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_asm_optimizations(
        gfp: *mut lame_global_flags,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  frame params"]
    pub fn lame_set_copyright(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_copyright(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_original(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_original(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_error_protection(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_error_protection(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_extension(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_extension(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_strict_ISO(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_strict_ISO(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " quantization/noise shaping"]
    pub fn lame_set_disable_reservoir(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_disable_reservoir(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_quant_comp(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_quant_comp(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_quant_comp_short(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_quant_comp_short(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_experimentalX(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_experimentalX(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_experimentalY(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_experimentalY(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_experimentalZ(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_experimentalZ(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_exp_nspsytune(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_exp_nspsytune(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_msfix(arg1: *mut lame_global_flags, arg2: f64);
}
extern "C" {
    pub fn lame_get_msfix(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    #[doc = " VBR control"]
    pub fn lame_set_VBR(arg1: *mut lame_global_flags, arg2: vbr_mode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_VBR(arg1: *const lame_global_flags) -> vbr_mode;
}
extern "C" {
    pub fn lame_set_VBR_q(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_VBR_q(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_VBR_quality(arg1: *mut lame_global_flags, arg2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_VBR_quality(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_VBR_mean_bitrate_kbps(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_VBR_mean_bitrate_kbps(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_VBR_min_bitrate_kbps(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_VBR_min_bitrate_kbps(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_VBR_max_bitrate_kbps(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_VBR_max_bitrate_kbps(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_VBR_hard_min(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_VBR_hard_min(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Filtering control"]
    pub fn lame_set_lowpassfreq(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_lowpassfreq(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_lowpasswidth(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_lowpasswidth(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_highpassfreq(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_highpassfreq(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_highpasswidth(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_highpasswidth(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " psycho acoustics and other arguments which you should not change"]
    #[doc = " unless you know what you are doing"]
    pub fn lame_set_ATHonly(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_ATHonly(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_ATHshort(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_ATHshort(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_noATH(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_noATH(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_ATHtype(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_ATHtype(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_ATHlower(arg1: *mut lame_global_flags, arg2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_ATHlower(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_athaa_type(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_athaa_type(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_athaa_sensitivity(
        arg1: *mut lame_global_flags,
        arg2: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_athaa_sensitivity(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_allow_diff_short(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_allow_diff_short(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_useTemporal(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_useTemporal(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_interChRatio(arg1: *mut lame_global_flags, arg2: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_interChRatio(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_set_no_short_blocks(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_no_short_blocks(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_force_short_blocks(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_force_short_blocks(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_set_emphasis(
        arg1: *mut lame_global_flags,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_emphasis(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_version(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_encoder_delay(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_encoder_padding(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_framesize(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_mf_samples_to_encode(gfp: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_size_mp3buffer(gfp: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_frameNum(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_totalframes(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_RadioGain(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_AudiophileGain(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_PeakSample(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_get_noclipGainChange(arg1: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_noclipScale(arg1: *const lame_global_flags) -> f32;
}
extern "C" {
    pub fn lame_get_maximum_number_of_samples(
        gfp: lame_t,
        buffer_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_init_params(arg1: *mut lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_lame_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_lame_short_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_lame_very_short_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_psy_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_lame_url() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_lame_os_bitness() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lame_version_t {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub alpha: ::std::os::raw::c_int,
    pub beta: ::std::os::raw::c_int,
    pub psy_major: ::std::os::raw::c_int,
    pub psy_minor: ::std::os::raw::c_int,
    pub psy_alpha: ::std::os::raw::c_int,
    pub psy_beta: ::std::os::raw::c_int,
    pub features: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lame_version_t() {
    assert_eq!(
        ::std::mem::size_of::<lame_version_t>(),
        40usize,
        concat!("Size of: ", stringify!(lame_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lame_version_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lame_version_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).alpha as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).beta as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(beta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).psy_major as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(psy_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).psy_minor as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(psy_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).psy_alpha as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(psy_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).psy_beta as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(psy_beta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lame_version_t>())).features as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lame_version_t),
            "::",
            stringify!(features)
        )
    );
}
extern "C" {
    pub fn get_lame_version_numerical(arg1: *mut lame_version_t);
}
extern "C" {
    pub fn lame_print_config(gfp: *const lame_global_flags);
}
extern "C" {
    pub fn lame_print_internals(gfp: *const lame_global_flags);
}
extern "C" {
    pub fn lame_encode_buffer(
        gfp: *mut lame_global_flags,
        buffer_l: *const ::std::os::raw::c_short,
        buffer_r: *const ::std::os::raw::c_short,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_interleaved(
        gfp: *mut lame_global_flags,
        pcm: *mut ::std::os::raw::c_short,
        num_samples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_float(
        gfp: *mut lame_global_flags,
        pcm_l: *const f32,
        pcm_r: *const f32,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_ieee_float(
        gfp: lame_t,
        pcm_l: *const f32,
        pcm_r: *const f32,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_interleaved_ieee_float(
        gfp: lame_t,
        pcm: *const f32,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_ieee_double(
        gfp: lame_t,
        pcm_l: *const f64,
        pcm_r: *const f64,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_interleaved_ieee_double(
        gfp: lame_t,
        pcm: *const f64,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_long(
        gfp: *mut lame_global_flags,
        buffer_l: *const ::std::os::raw::c_long,
        buffer_r: *const ::std::os::raw::c_long,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_long2(
        gfp: *mut lame_global_flags,
        buffer_l: *const ::std::os::raw::c_long,
        buffer_r: *const ::std::os::raw::c_long,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_int(
        gfp: *mut lame_global_flags,
        buffer_l: *const ::std::os::raw::c_int,
        buffer_r: *const ::std::os::raw::c_int,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_buffer_interleaved_int(
        gfp: lame_t,
        pcm: *const ::std::os::raw::c_int,
        nsamples: ::std::os::raw::c_int,
        mp3buf: *mut ::std::os::raw::c_uchar,
        mp3buf_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_flush(
        gfp: *mut lame_global_flags,
        mp3buf: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_encode_flush_nogap(
        gfp: *mut lame_global_flags,
        mp3buf: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_init_bitstream(gfp: *mut lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_bitrate_hist(
        gfp: *const lame_global_flags,
        bitrate_count: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lame_bitrate_kbps(
        gfp: *const lame_global_flags,
        bitrate_kbps: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lame_stereo_mode_hist(
        gfp: *const lame_global_flags,
        stereo_mode_count: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lame_bitrate_stereo_mode_hist(
        gfp: *const lame_global_flags,
        bitrate_stmode_count: *mut [::std::os::raw::c_int; 4usize],
    );
}
extern "C" {
    pub fn lame_block_type_hist(
        gfp: *const lame_global_flags,
        btype_count: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lame_bitrate_block_type_hist(
        gfp: *const lame_global_flags,
        bitrate_btype_count: *mut [::std::os::raw::c_int; 6usize],
    );
}
extern "C" {
    pub fn lame_mp3_tags_fid(arg1: *mut lame_global_flags, fid: *mut FILE);
}
extern "C" {
    pub fn lame_get_lametag_frame(
        arg1: *const lame_global_flags,
        buffer: *mut ::std::os::raw::c_uchar,
        size: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn lame_close(arg1: *mut lame_global_flags) -> ::std::os::raw::c_int;
}
#[doc = " decoding"]
#[doc = ""]
#[doc = " a simple interface to mpglib, part of mpg123, is also included if"]
#[doc = " libmp3lame is compiled with HAVE_MPGLIB"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hip_global_struct {
    _unused: [u8; 0],
}
pub type hip_global_flags = hip_global_struct;
pub type hip_t = *mut hip_global_flags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp3data_struct {
    pub header_parsed: ::std::os::raw::c_int,
    pub stereo: ::std::os::raw::c_int,
    pub samplerate: ::std::os::raw::c_int,
    pub bitrate: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub mode_ext: ::std::os::raw::c_int,
    pub framesize: ::std::os::raw::c_int,
    pub nsamp: ::std::os::raw::c_ulong,
    pub totalframes: ::std::os::raw::c_int,
    pub framenum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mp3data_struct() {
    assert_eq!(
        ::std::mem::size_of::<mp3data_struct>(),
        48usize,
        concat!("Size of: ", stringify!(mp3data_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<mp3data_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(mp3data_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).header_parsed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(header_parsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).stereo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(stereo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).samplerate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(samplerate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).bitrate as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).mode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).mode_ext as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(mode_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).framesize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(framesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).nsamp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(nsamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).totalframes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(totalframes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mp3data_struct>())).framenum as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mp3data_struct),
            "::",
            stringify!(framenum)
        )
    );
}
extern "C" {
    pub fn hip_decode_init() -> hip_t;
}
extern "C" {
    pub fn hip_decode_exit(gfp: hip_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hip_set_errorf(gfp: hip_t, f: lame_report_function);
}
extern "C" {
    pub fn hip_set_debugf(gfp: hip_t, f: lame_report_function);
}
extern "C" {
    pub fn hip_set_msgf(gfp: hip_t, f: lame_report_function);
}
extern "C" {
    #[doc = " input 1 mp3 frame, output (maybe) pcm data."]
    #[doc = ""]
    #[doc = "  nout = hip_decode(hip, mp3buf,len,pcm_l,pcm_r);"]
    #[doc = ""]
    #[doc = " input:"]
    #[doc = "    len          :  number of bytes of mp3 data in mp3buf"]
    #[doc = "    mp3buf[len]  :  mp3 data to be decoded"]
    #[doc = ""]
    #[doc = " output:"]
    #[doc = "    nout:  -1    : decoding error"]
    #[doc = "            0    : need more data before we can complete the decode"]
    #[doc = "           >0    : returned 'nout' samples worth of data in pcm_l,pcm_r"]
    #[doc = "    pcm_l[nout]  : left channel data"]
    #[doc = "    pcm_r[nout]  : right channel data"]
    #[doc = ""]
    pub fn hip_decode(
        gfp: hip_t,
        mp3buf: *mut ::std::os::raw::c_uchar,
        len: size_t,
        pcm_l: *mut ::std::os::raw::c_short,
        pcm_r: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hip_decode_headers(
        gfp: hip_t,
        mp3buf: *mut ::std::os::raw::c_uchar,
        len: size_t,
        pcm_l: *mut ::std::os::raw::c_short,
        pcm_r: *mut ::std::os::raw::c_short,
        mp3data: *mut mp3data_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hip_decode1(
        gfp: hip_t,
        mp3buf: *mut ::std::os::raw::c_uchar,
        len: size_t,
        pcm_l: *mut ::std::os::raw::c_short,
        pcm_r: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hip_decode1_headers(
        gfp: hip_t,
        mp3buf: *mut ::std::os::raw::c_uchar,
        len: size_t,
        pcm_l: *mut ::std::os::raw::c_short,
        pcm_r: *mut ::std::os::raw::c_short,
        mp3data: *mut mp3data_struct,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hip_decode1_headersB(
        gfp: hip_t,
        mp3buf: *mut ::std::os::raw::c_uchar,
        len: size_t,
        pcm_l: *mut ::std::os::raw::c_short,
        pcm_r: *mut ::std::os::raw::c_short,
        mp3data: *mut mp3data_struct,
        enc_delay: *mut ::std::os::raw::c_int,
        enc_padding: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_genre_list(
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *const ::std::os::raw::c_char,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        cookie: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn id3tag_init(gfp: lame_t);
}
extern "C" {
    pub fn id3tag_add_v2(gfp: lame_t);
}
extern "C" {
    pub fn id3tag_v1_only(gfp: lame_t);
}
extern "C" {
    pub fn id3tag_v2_only(gfp: lame_t);
}
extern "C" {
    pub fn id3tag_space_v1(gfp: lame_t);
}
extern "C" {
    pub fn id3tag_pad_v2(gfp: lame_t);
}
extern "C" {
    pub fn id3tag_set_pad(gfp: lame_t, n: size_t);
}
extern "C" {
    pub fn id3tag_set_title(gfp: lame_t, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn id3tag_set_artist(gfp: lame_t, artist: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn id3tag_set_album(gfp: lame_t, album: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn id3tag_set_year(gfp: lame_t, year: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn id3tag_set_comment(gfp: lame_t, comment: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn id3tag_set_track(
        gfp: lame_t,
        track: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_genre(
        gfp: lame_t,
        genre: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_fieldvalue(
        gfp: lame_t,
        fieldvalue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_albumart(
        gfp: lame_t,
        image: *const ::std::os::raw::c_char,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_id3v1_tag(
        gfp: lame_t,
        buffer: *mut ::std::os::raw::c_uchar,
        size: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn lame_get_id3v2_tag(
        gfp: lame_t,
        buffer: *mut ::std::os::raw::c_uchar,
        size: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn lame_set_write_id3tag_automatic(
        gfp: *mut lame_global_flags,
        arg1: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lame_get_write_id3tag_automatic(gfp: *const lame_global_flags) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_textinfo_latin1(
        gfp: lame_t,
        id: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_comment_latin1(
        gfp: lame_t,
        lang: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_fieldvalue_utf16(
        gfp: lame_t,
        fieldvalue: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_textinfo_utf16(
        gfp: lame_t,
        id: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn id3tag_set_comment_utf16(
        gfp: lame_t,
        lang: *const ::std::os::raw::c_char,
        desc: *const ::std::os::raw::c_ushort,
        text: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "  list of valid bitrates [kbps] & sample frequencies [Hz]."]
    #[doc = "  first index: 0: MPEG-2   values  (sample frequencies 16...24 kHz)"]
    #[doc = "               1: MPEG-1   values  (sample frequencies 32...48 kHz)"]
    #[doc = "               2: MPEG-2.5 values  (sample frequencies  8...12 kHz)"]
    pub static mut bitrate_table: [[::std::os::raw::c_int; 16usize]; 3usize];
}
extern "C" {
    pub static mut samplerate_table: [[::std::os::raw::c_int; 4usize]; 3usize];
}
extern "C" {
    pub fn lame_get_bitrate(
        mpeg_version: ::std::os::raw::c_int,
        table_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lame_get_samplerate(
        mpeg_version: ::std::os::raw::c_int,
        table_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const lame_errorcodes_t_LAME_OKAY: lame_errorcodes_t = 0;
pub const lame_errorcodes_t_LAME_NOERROR: lame_errorcodes_t = 0;
pub const lame_errorcodes_t_LAME_GENERICERROR: lame_errorcodes_t = -1;
pub const lame_errorcodes_t_LAME_NOMEM: lame_errorcodes_t = -10;
pub const lame_errorcodes_t_LAME_BADBITRATE: lame_errorcodes_t = -11;
pub const lame_errorcodes_t_LAME_BADSAMPFREQ: lame_errorcodes_t = -12;
pub const lame_errorcodes_t_LAME_INTERNALERROR: lame_errorcodes_t = -13;
pub const lame_errorcodes_t_FRONTEND_READERROR: lame_errorcodes_t = -80;
pub const lame_errorcodes_t_FRONTEND_WRITEERROR: lame_errorcodes_t = -81;
pub const lame_errorcodes_t_FRONTEND_FILETOOLARGE: lame_errorcodes_t = -82;
pub type lame_errorcodes_t = ::std::os::raw::c_int;
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
